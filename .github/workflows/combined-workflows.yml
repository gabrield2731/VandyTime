name: Combined Workflow

on:
  push:
    branches:
      - '**'

  pull_request:
    branches:
      - main

jobs:
  api-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the specific branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Dependencies and Create .env
        run: |
          cd backend
          python -m venv venv  # Create virtual environment
          source venv/bin/activate  # Activate virtual environment
          pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt  # Install dependencies

          # Create a .env file with MONGO_URI
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env

      - name: Run API Tests
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          cd backend
          source venv/bin/activate  # Reactivate virtual environment
          pytest --cov=app/controllers --cov-report=term-missing  # Run tests

  documentation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Changed Files
        id: get_changed_files
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const commitSha = context.sha;
            const commit = await github.rest.repos.getCommit({
              owner,
              repo,
              ref: commitSha
            });
            const changedFiles = commit.data.files.map(file => file.filename);
            console.log("Changed files: ", changedFiles);  // Print changed files for debugging
            const fs = require('fs');
            fs.writeFileSync('changedFiles.txt', JSON.stringify(changedFiles));

      - name: Read Changed Files
        run: |
          if [ -f changedFiles.txt ]; then
            files_changed=$(cat changedFiles.txt)
          else
            files_changed='[]'
          fi
          echo "Files changed: $files_changed"  # Debugging step

      - name: Call the API
        run: |
          if [ -f changedFiles.txt ]; then
            files_changed=$(cat changedFiles.txt)
          else
            files_changed='[]'
          fi
          files_changed=$(echo $files_changed | jq .)
          json_payload=$(jq -n --arg repo_owner "${{ github.repository_owner }}" --arg repo "${{ github.event.repository.name }}" --argjson files_changed "$files_changed" '{repo_owner: $repo_owner, repo: $repo, files_changed: $files_changed}')
          echo "JSON Payload: $json_payload"  # Debugging step
          response=$(curl -s https://docubot-two.vercel.app/document -H "Content-Type: application/json" -d "$json_payload")
          if [ $? -ne 0 ]; then
            echo "Error in API request"
            exit 1
          fi
          echo "API Response: $response"  # Debugging step
          if echo "$response" | jq -e . > /dev/null 2>&1; then
            response_content=$(echo $response | jq -r '.updated_doc')
            echo "$response_content" > response.txt
          else
            echo "Invalid JSON response: $response"
            exit 1
          fi

      - name: Update Documentation
        run: |
          cat response.txt > documentation.md

      - name: Commit and push changes if documentation was updated
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          if git diff --quiet documentation.md; then
            echo "No changes in documentation.md, skipping commit."
          else
            git add documentation.md
            git commit -m "Update documentation with API data"
            # Extract branch name from 'github.ref' (e.g., 'refs/heads/branch-name' -> 'branch-name')
            branch_name=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
            git push origin "$branch_name"
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}